#!/usr/bin/bash
## Author: Simon D. Woodtli
## Project: https://github.com/SimonWoodtli/cmd-zet
## License:  Apache-2.0
#
## TODO anything that returns one line like `zet get` should also be xcliped
## __functionName() = main function called from user input
## _functionName()  = sub function only called from within a main function
## enable extended globbing:
shopt -s extglob
########################### global variables ###########################
#
## TODO change color variables in whole script to short version
declare rd=$'\033[31m'      #red
declare gn=$'\033[32m'      #green
declare yw=$'\033[33m'      #yellow
declare be=$'\033[34m'      #blue
declare cn=$'\033[36m'      #cyan
#declare bk=$'\033[30m'     #black
#declare we=$'\033[37m'     #white
#declare ma=$'\033[35m'     #magenta
declare rt=$'\033[0m'       #reset
declare bd=$'\033[1m'       #bold

## global variables:
declare configFile="$HOME/.config/zet/config"
declare zetDir
declare -A commands
declare -a orderCommands
declare subcommand
declare scriptName="${0##*/}"
## configFile contains a few more global var.
############################## config init #############################
__configInit() {
  ## check if zet config dir exists or create it
  [[ -d "${configFile%config}" ]] || mkdir -p "${configFile%config}"
  ## dump config data into file
  _configData | sort > "$configFile"
  echo "$cn
███████╗███████╗████████╗    ██╗███╗   ██╗██╗████████╗
╚══███╔╝██╔════╝╚══██╔══╝    ██║████╗  ██║██║╚══██╔══╝
  ███╔╝ █████╗     ██║       ██║██╔██╗ ██║██║   ██║
 ███╔╝  ██╔══╝     ██║       ██║██║╚██╗██║██║   ██║
███████╗███████╗   ██║       ██║██║ ╚████║██║   ██║
╚══════╝╚══════╝   ╚═╝       ╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝
$rt"
}
_configData() {
  ## change these settings to your needs
  cat <<EOF
editor=vim
zetPublicDir=$HOME/Repos/github.com/SimonWoodtli/zet
zetPrivateDir=$HOME/Private/zet
gitUser=SimonWoodtli
screenshotDir=$HOME/Pictures
current=public
EOF
}
############################# crucial tests ############################
_checkBashVersion() {
  ## Check Bash Version: Only compare Major Version Number
  local errVersion="${rd}Error:$rt Bash version 4+ required"
  [[ "${BASH_VERSION:0:1}" -gt 4 ]] || { echo "$errVersion"; return 1; }
}
_checkDependencies() {
  ## ImageMagick is also a dependency: `identify` is part of this toolbox
  local -a programs=( fzf fd rg sed awk identify xclip git gnome-screenshot )
  local -a missPrograms
  for program in "${programs[@]}"; do
    command -v "$program" >/dev/null 2>&1 || missPrograms+=( "$program" )
  done
  local errMiss="${rd}Error:$rt Missing dependency(ies): \
${bd}${missPrograms[*]}$rt"
  if [[ -n "${missPrograms[*]}" ]]; then
    echo "$errMiss"
    return 1
  fi
}
## test if configFile exits if not run the initialize command
[[ -f "$configFile" ]] || __configInit
## run check functions and source configFile variables or exit
_checkBashVersion && _checkDependencies && source "$configFile" ||            \
  { echo "${rd}Error:$rt Check tests failed or couldn't source configFile";   \
    exit 1; }
## read configFile if current is set to public set zetDir to path of public zet
## else set it to path of private zet
[[ "$current" == public ]] && zetDir="$zetPublicDir" || zetDir="$zetPrivateDir"
## If no argument is passed into `zet` run initialize
[[ $# -ne 0 ]] || __configInit
############################## config cmds #############################
__configPrintCurrentZetDir() { echo "$current" ; }
__configUseZet() {
  ## case for arguments passed into it from associative array "commands" value.
  ## see title: main
  local hintArgs="${be}Hint:$rt Use ${bd}\`zet use <public|private>\`$rt"
  [[ -n "$*" ]] || { echo "$hintArgs"; return 1; }

  case "$1" in
    public|Public) sed -i 's|current=.*|current=public|' "$configFile"
      source "$configFile"
      __configPrintCurrentZetDir;;
    private|Private) sed -i 's|current=.*|current=private|' "$configFile"
      source "$configFile"
      __configPrintCurrentZetDir;;
    *) echo "${yw}Warning:$rt only values accepted: ${bd}private public$rt"
  esac
}
############################### utilities ##############################
_isoSec() { date -u +%Y%m%d%H%M%S; } #get current isosec in UTC
_urlencode() {
  ## make sure whitespace gets encoded as %20 for web urls
  local keywords="$1"
  local keywordsEncoded
  for (( i=0; i<${#keywords}; i++ )); do
    [[ "${keywords:$i:1}" =~ [[:blank:]] ]] && keywordsEncoded+="%20" ||      \
      keywordsEncoded+="${keywords:$i:1}"
  done
  ## bash can only return exit status, this is the next best thing I figured
  echo "$keywordsEncoded"
}
_newest() {
  local IFS=$'\n'
  local -a lsFiles
  ## ${1:-.}/* lists files with absolute path where $1 would simply list files
  ## Read the output of the ls command into the lsFiles array
  mapfile -t lsFiles < <(ls -1 --color=never -trd "${1:-.}"/*)
  ## print the last element of the lsFiles array, which is the newest file
  ## in the directory
  echo "${lsFiles[-1]}"
}
################################ create ################################
__create() {
  local errDir="${rd}Error:$rt Unable to create folder ${bd}$dir${rt}"
  ## create readme file and git push it
  local dir="$zetDir/$(_isoSec)" #absolute path
  local readme="$dir/README.md" #absolute path
  ## store user input arguments as title
  local title="$*"
  mkdir -p "$dir" || { echo "$errDir">&2; return 1; }
  ## create readme with title
  printf "# %s\n\n" "$title" > "$readme"
  ## edit file
  _createEditFile
  ## push file to remote git repo
  _createPushGit
}
_createEditFile() { "$editor" "$readme" ; }
_createPushGit() {
  local errTitle="${rd}Error:$rt Missing title."
  local msgCommit="${gn}Commit:$rt Create ${dir##*/}/README.md - $title"
  local errCommit="${rd}Error:$rt Commit ${dir##*/}/README.md failed"
  local errPush="${rd}Error:$rt Push ${dir##*/}/README.md failed"
  ## check if readme.md is empty, if so abort git commands
  [[ -s "$readme" ]] || return 1
  cd "$dir" || return 1
  ## check if title has changed after editing if so reassign it
  local newTitle="$(head -1 "$readme" | sed 's|#\+ *||')"
  [[ "$title" == "$newTitle" ]] || title="$newTitle"
  ## check if title string is not empty or exit
  [[ -n "$title" ]] || { echo "$errTitle"; return 1; }
  git pull -q
  git add -A "$dir" &>/dev/null
  git commit -m "$title" &>/dev/null && echo "$msgCommit" ||                  \
    { echo "$errCommit"; return 1; }
  git push &>/dev/null || { echo "$errPush"; return 1; }
}
__createScreenshot() {
  local hintTitle="${be}Hint:$rt Use ${bd}\`zet screenshot <title>\`$rt"
  local errDir="${rd}Error:$rt Unable to create directory ${bd}$dir${rt}"
  local errScreenshot="${rd}Error:$rt Unable to create screenshot."
  local errIdentify="${rd}Error:$rt Screenshot width/height could not be set."
  local errMove="${rd}Error:$rt Unable to move screenshot."
  local errSize="${rd}Error:$rt Screenshot size is limited to 1MB. \
Zettel: ${bd}${dir##*/}${rt}"
  local isoSec="$(_isoSec)"
  local dir="$zetDir/$isoSec" #absolute path
  local readme="$dir/README.md" #absolute path
  local title="$*"
  ## test if arguments for title are not empty
  [[ -n "$title" ]] || { echo "$hintTitle"; return 1; }
  mkdir -p "$dir" || { echo "$errDir">&2; return 1; }
  ## create screenshot, if you like to use another tool replace the
  ## gnome-screenshot command
  gnome-screenshot -a 2>/dev/null || { echo "$errScreenshot"; return 1; }
  ## get latest created screenshot path
  local imagePath=$(_newest "$screenshotDir") #absolute path
  ## find out the images width and height
  local width=$(identify -format %w "$imagePath" 2>/dev/null)
  local height=$(identify -format %h "$imagePath" 2>/dev/null)
  ## imagePath can also refer to a dir if no Screenshot gets created.
  ## Then it moves the whole dir into your Zettel this test prevents this.
  ## This test checks if a width|height exists else it exits
  [[ -n "$width" || -n "$height" ]] || { echo "$errIdentify"; return 1; }
  local imageName="Screenshot-$isoSec-${width}x${height}.png"
  ## mv image into new Zettel dir and rename it
  mv "$imagePath" "$dir/$imageName" || { echo "$errMove"; return 1; }
  ## print content into readme
  printf "%s\n\n%s\n" "# 🖼️ $title" "![]($imageName)" > "$readme"
  ## test if new zettel folder is not more than 1MB otherwise exit
  local dirSize="$(\du -s "$dir" | awk '{print $1}')"
  [[ "$dirSize" -le 1000 ]] || { echo "$errSize" >&2; return 1; }
  ## commit and push files to git remote
  _createPushGit
}
############################ search commands ###########################
__printReferenceLinkLines() {
  local keywords="$*"
  local hintKeywords="${be}Hint:$rt Missing search query. \
Use ${bd}\`zet link <searchterm>\`$rt"
  [[ -n "$keywords" ]] || { echo "$hintKeywords"; return 1; }
  local -a addLinkLine=()
  local -i i=0
  ## create ripgrep keyword string with pipes. The idea is that if multiple
  ## keywords are being used they are filtered with an AND logic.
  local keywordRgLine
  for keyword in $keywords; do
    keywordRgLine+="rg -i --no-heading $keyword|"
  done
  ## remove the last pipe from string
  keywordRgLine="${keywordRgLine%|}"
  ## loop over all dir in zetDir
  for dir in "$zetDir"/*; do
    ## grab title of current zetdir empty variable if keyword not found.
    title="$(head -n1 "$dir/README.md" 2>/dev/null |                          \
      eval "$keywordRgLine" | sed 's|#[[:blank:]]||')"
    ## if it already finds keyword in title skip checking the tagline. To
    ## avoid double entries
    if [[ -n "$title" ]]; then
      ## add title to array
      addLinkLine[$i]="* [${dir##*/}](/${dir##*/}/) $title"
      i+=1
      ## skip rest of loop. loop over next zetdir
      continue
    fi
    ## store last line
    tagline="$(tail -n 1 "$dir/README.md" 2>/dev/null |                       \
      eval "$keywordRgLine" )"
    ## check if last line has same structure to tagline
    if [[ "$tagline" =~ ^[[:blank:]]{4}\#.*$ ]]; then
      ## add the tagline title to array
      local truncateFirstLine="$(head -n1 "$dir/README.md" 2>/dev/null |      \
        sed 's|#[[:blank:]]||')"
      addLinkLine[$i]+="* [${dir##*/}](/${dir##*/}/) $truncateFirstLine"
      i+=1
    fi
  done
  printf '%s\n' "${addLinkLine[@]}"
}
__printGithubQueryLine() {
  local keywords="$*"
  local hintKeywords="${be}Hint:$rt Missing search query. \
Use ${bd}\`zet query <searchterm>\`$rt"
  [[ -n "$keywords" ]] || { echo "$hintKeywords"; return 1; }
  local encodeKeywords="$(_urlencode "$keywords")"
  local link="https://github.com/$gitUser/$scriptName/search?q=$encodeKeywords"
  echo "[$keywords]: <$link>"
}
################################# stuff ################################
__editLastModifiedReadme() {
  ## Old Method 1: Two loops, seems more sane less command repetition
  ##loop: list all files with modification timestamp
  #local lastModReadmeDate="$( for f in "$zetDir"/*/README.md; do         \
  #  date -r "$f" +"%Y-%m-%d-%H-%M-%S"; done                                   \
  #  | sort -n                   `#once loop finished sort those timestamps`   \
  #  | tail -n 1)"                #filter by last entry
  ## Old Method 2: use fd
  #local lastModReadmeDate="$(fd -t f . -x date -r {} +"%Y-%m-%d-%H-%M-%S" | sort -n | tail -n 1)"
  ## second loop for methode1 and 2:
  ## loop again with mod timestamp and check which timestamp matches the
  ## last entry of the first loop. If found store file location
  #for f in "$zetDir"/*/README.md; do
  #  modReadmeDate=$(date -r "$f" +"%Y-%m-%d-%H-%M-%S")
  #  [[ "$modReadmeDate" == "$lastModReadmeDate" ]] && local readme="$f"
  #done
  ## TODO When it comes to performance I should do some testing what actually
  ## works best
  ## Current Method: Use fd and date together
  local readme="$(fd -t f . "$zetDir" -x sh -c                                \
    'printf "%s\n" "$(date -r {} +"%Y-%m-%d-%H-%M-%S") {}"' | sort -n |       \
    tail -n 1 | awk '{print $2}')"
  local dir="${readme%/*}"
  ## edit readme and if changes are made git push them
  _editReadme
  ## Method 3: One loop that invokes subshell at every iteration
  #local -a modifiedReadme=()
  #local -i i=0
  #local lastModifiedReadme
  #for f in "$zetDir"/*/*; do
  #  readmePath+=( "$f" )
  #  modifiedReadme+=( "$(date -ur "$f" +"%Y%m%d%H%M%S")" )
  #  sorted=($(printf '%s\n' "${modifiedReadme[@]}"|sort|tail -n 1))
  #  [[ "$sorted" -eq "${modifiedReadme[$i]}" ]] && lastModifiedReadme="${readmePath[$i]}"
  #  i+=1
  #done
}
__countReadme() { fd . "$zetDir" --type d | wc -l; }
__version() { echo "v0.0.1"; }

############################# help commands ############################
__usage() {
  ## associative arrays are unordered for this loop to work order is
  ## required hence the second regular array 'orderCommands'
  printf "%s\n\n" "${yw}COMMANDS:$rt"
  for (( i=0; i < ${#orderCommands[@]}; i+=1 )); do
    key="${orderCommands[$i]}"
    [[ "$i" -ge 12 ]] && echo "    zet $key <pattern>" && continue
    echo "    zet $key"
  done
}
__help() {
  ##TODO for every subcommand also have help page like `zet edit help` or
  ## `zet edit -h`
  cat <<EOF
${yw}NAME:$rt
    zet - a command line tool to manage a Zettelkasten (notebox) repository.

${yw}INSTALL:$rt
    Installation instructions can be found on the project's website.

${yw}USAGE:$rt
    zet [OPTIONS] [<subcommand>] [<pattern>]...

${yw}ARGS:$rt
    ${gn}<subcommand>$rt
          The subcommand which invokes different functionalities to manage \
Zettel (notes).
    ${gn}<pattern>$rt
          The pattern for some subcommands to search keywords, add title etc.

${yw}OPTIONS:$rt
    ${gn}-h$rt, ${gn}--help$rt
          Show help information
    ${gn}-v$rt, ${gn}--version$rt
          Show version information
    ${gn}-u$rt, ${gn}--usage$rt
          List all commands

${yw}ABOUT:$rt
    Project: https://github.com/simonwoodtli/cmd-zet
    Author: Simon Donald Woodtli <simonwoodtli@posteo.net>
EOF
}
##################### fzfSelect dependent functions ####################
__fzfSelect() {
  ##TODO make fzf dependent zet functions run inside vim like :Rg or the like
  ## `!!zet get` maybe won't work with !! magic wands. but something like the
  ## commands that ship with fzf e.g. :Rg should be possible to do. It
  ## works within a tmux session but need to figure out how to make it work
  ## without tmux session
  ##TODO make this an array so multiple files can be selected
  ##IMPORTANT!creating this feature with array will cost a lot of overhead many
  ## loops will be needed for the other edit and delete functions that
  #want to utilize this??
  ##TODO test which method has best performance
  ## Method 1:
  ## Use fd to find all the README.md files in the $zetDir directory
  ## and store the list in an array
  #
  #local -a readmeFiles
  #readmeFiles=($(fd --type f --follow --exclude .git --extension md .         \
  #  "$zetDir" | grep -E '/README.md$'))
  ## If no README.md files are found, return 1
  #[[ ${#readmeFiles[@]} -eq 0 ]] && return 1
  ## Extract the title and tagline from each README.md file and store them
  ## in an array
  #local -a titles
  #for readme in "${readmeFiles[@]}"; do
  #  local title="$(head -n 1 "$readme")"
  #  local tagline="$(tail -n 1 "$readme" | rg '^[[:blank:]]{4}\#.*$')"
  #  if [[ -n "$tagline" ]]; then
  #    titles+=("$title $tagline")
  #  else
  #    titles+=("$title")
  #  fi
  #done
  #############################################################################
  ## Method 2: (my favourite)
  ## filter and merge title and tag lines
  #
  local -a titles=()
  local readmeFiles="$zetDir"/*/README.md
  for readme in $readmeFiles; do
    local title="$(head -n 1 "$readme")"
    local tagline="$(tail -n 1 "$readme" | rg '^[[:blank:]]{4}\#.*$')"
    if [[ -n "$tagline" ]]; then
      titles+=("$title $tagline")
    else
      titles+=("$title")
    fi
  done

  ## Use fzf to select a title from the list of titles (my favourite,
  ## better than loop)
  local title="$(printf '%s\n' "${titles[@]}" |                               \
    FZF_DEFAULT_COMMAND='fd --type f --follow --exclude .git'                 \
    fzf-tmux --no-preview  -w 80% -h 70% --prompt="zet search: "              \
    --layout=reverse --info=inline | sed -r 's|[[:blank:]]{5}#[a-z].*$||g')"  \
    &>/dev/null
  #############################################################################
  ## Method 3:
  ## filter and merge title and tag lines
  #local -a titles=()
  #for f in "$zetDir"/*; do
  #  tagline="$(tail -n 1 "$f"/README.md 2>/dev/null)"
  #  title="$(head -n1 "$f"/README.md 2>/dev/null)"
  #  if [[ "$tagline" =~ ^[[:blank:]]{4}\#.*$ ]]; then
  #    titles+=("$title $tagline")
  #  else
  #    titles+=("$title")
  #  fi
  #done
  ## fzf select title with tags at the end of title
  #local title="$(for title in "${titles[@]}"; do                              \
  #  echo "$title"; done                                                       \
  #  | FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'      \
  #  fzf-tmux --no-preview  -w 80% -h 70% --prompt="zet search: "              \
  #  --layout=reverse                                                          \
  #  --info=inline            `#pipe each Title and possible Tagline into fzf` \
  #  | sed -r 's|[[:blank:]]{5}#[a-z].*$||g')" &>/dev/null #rm tags from string
  #
  #############################################################################

  ## if fzfSelect runs and you abort command it echos all elements from loop
  ## test if title is empty and exit fixes it
  [[ -n "$title" ]] || return 1
  ## find the absolute path to the selected README.md file using rg
  local readme="$(rg --no-heading -Nlx -t md "$title" "$zetDir")"
  ## if the selected title does not match a README.md file, return 1
  [[ -n "$readme" ]] || return 1
  ## Extract the absolute path to the directory containing the selected
  ## README.md file, remove README.md suffix
  local dir="${readme%/*}"
  ## case for arguments passed into it from associative array "commands" value.
  ## see title: main
  case  "$1" in
  ## edit file from fzf selection
    edit) _editReadme ;;
    delete) _deleteReadme;;
    get) _printDirPath ;;
    body) _printBodyReadme ;;
    cat) _printReadme ;;
  esac
}
_printReadme() { cat "$readme" ; }
_printBodyReadme() {
  ## store the last line of the README file if it's a tagline
  local tags="$(tail -n 1 "$readme" | rg -e "^[[:blank:]]{4}#.*$")"
  ## although shellcheck doesn't like this if else logic with A && B ||
  ## C. If B and C are var assignments this shouldn't be a problem.
  ## https://github.com/koalaman/shellcheck/wiki/SC2015
  ## test if readme has tags if yes remove last 4 lines and first two
  ## lines for the title. Else just remove the first two lines
  [[ -n "$tags" ]] && head -n -4 "$readme" | tail -n +3 || tail -n +3 "$readme"
}
_printDirPath() { echo "$dir" ; }
_deleteReadme() {
  local errDir="${rd}Error:$rt Unable to remove directory ${bd}$dir${rt}"
  local title="$(head -1 "$readme" | sed 's|#\+ *||')"
  rm -rf "$dir" || { echo "$errDir"; return 1; }
  _deletePushGit
}
_deletePushGit() {
  ## TODO create an array from all the selected files
  #local -a deletedZet=( "$( git ls-files --deleted )" )
  local msgCommit="${gn}Commit:$rt Delete ${dir##*/}/README.md - $title"
  local errCommit="${rd}Error:$rt Commit ${dir##*/}/README.md failed"
  local errPush="${rd}Error:$rt Push ${dir##*/}/README.md failed"
  cd "$zetDir" || return 1
  git pull -q
  git add -A "$dir" &>/dev/null
  git commit -m "Delete ${dir##*/}" &>/dev/null && echo "$msgCommit" ||       \
    { echo "$errCommit"; return 1; }
  git push &>/dev/null || { echo "$errPush"; return 1; }
}
_editReadme() {
  "$editor" "$readme"
  _editPushGit
}
_editPushGit() {
  local hintChange="${be}Hint:$rt No changes were made to ${dir##*/}/README.md"
  local msgCommit="${gn}Commit:$rt Edit ${dir##*/}/README.md - $title"
  local errCommit="${rd}Error:$rt Commit ${dir##*/}/README.md failed"
  local errPush="${rd}Error:$rt Push ${dir##*/}/README.md failed"
  local errTitle="${rd}Error:$rt No title found in ${dir##*/}/README.md"
  cd "$zetDir" || return 1
  local gitStatusCheck="$(git status | rg "${dir##*/}")"
  ## check if any changes where made, if not abort git
  [[ -n "$gitStatusCheck" ]] || { echo "$hintChange"; return 1; }
  ## assign title
  local title="$(head -1 "$readme" | sed 's|#\+ *||')"
  ## check if title string is empty if so exit
  [[ -n "$title" ]] || { echo "$errTitle"; return 1; }
  git pull -q
  git add -A "$dir" &>/dev/null
  git commit -m "$title" &>/dev/null && echo "$msgCommit" ||                  \
    { echo "$errCommit"; return 1; }
  git push &>/dev/null || { echo "$errPush"; return 1; }
}
################################# main #################################
## create associative array with key value pairs
## since associative array come unordered another regular array is needed too
commands[init]="__configInit";                    orderCommands+=("init")
commands[current]="__configPrintCurrentZetDir";   orderCommands+=("current")
commands[last]="__editLastModifiedReadme";        orderCommands+=("last")
commands[delete]="__fzfSelect delete";            orderCommands+=("delete")
commands[edit]="__fzfSelect edit";                orderCommands+=("edit")
commands[get]="__fzfSelect get";                  orderCommands+=("get")
commands[body]="__fzfSelect body";                orderCommands+=("body")
commands[cat]="__fzfSelect cat";                  orderCommands+=("cat")
commands[count]="__countReadme";                  orderCommands+=("count")
commands[help]="__help";                          orderCommands+=("help")
commands[version]="__version";                    orderCommands+=("version")
commands[usage]="__usage";                        orderCommands+=("usage")
## command with <patterns>
commands[screenshot]="__createScreenshot";        orderCommands+=("screenshot")
commands[use]="__configUseZet";                   orderCommands+=("use")
commands[create]="__create";                      orderCommands+=("create")
commands[link]="__printReferenceLinkLines";       orderCommands+=("link")
commands[query]="__printGithubQueryLine";         orderCommands+=("query")
## case for options/flags
case "$1" in
  --help|-h) __help;;
  --usage|-u) __usage;;
  --version|-v) __version;;
esac
subcommand="$1"; shift
## loop over keys in the commands associative array
for key in "${!commands[@]}"; do
  ## if the key matches the user input subcommand
  if [[ "$key" == "$subcommand" ]]; then
    ## execute the function call stored in the value of the key
    eval "${commands[${key}]}" "$@"
    exit 0
  fi
done
######################### Tab Completion Context ########################
## Tab completion - add to bashrc: complete -C zet zet
## if the script is being run in the context of tab completion
if [ -n "$COMP_LINE" ]; then
  ## loop over the keys in the commands array
  for cmd in "${!commands[@]}"; do
    ## if the current key starts with the user input 
    ## print the key as a possible completion
    [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
  done
  exit 0
fi
